# Generated by Django 3.2.2 on 2021-09-02 15:10

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import policyengine.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=30, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BaseAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_bundled', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metagov_slug', models.SlugField(blank=True, max_length=36, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CommunityPlatform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('community_name', models.CharField(max_length=1000, verbose_name='team_name')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.community')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_policyengine.communityplatform_set+', to='contenttypes.contenttype')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
        ),
        migrations.CreateModel(
            name='CommunityUser',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.user')),
                ('readable_name', models.CharField(max_length=300, null=True, verbose_name='readable_name')),
                ('access_token', models.CharField(max_length=300, null=True, verbose_name='access_token')),
                ('is_community_admin', models.BooleanField(default=False)),
                ('avatar', models.CharField(max_length=500, null=True, verbose_name='avatar')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityplatform')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_policyengine.communityuser_set+', to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('auth.user', models.Model),
            managers=[
                ('objects', policyengine.models.PolymorphicUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_store', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('platform', 'platform'), ('constitution', 'constitution'), ('trigger', 'trigger')], max_length=30)),
                ('filter', models.TextField(blank=True, default='')),
                ('initialize', models.TextField(blank=True, default='')),
                ('check', models.TextField(blank=True, default='')),
                ('notify', models.TextField(blank=True, default='')),
                ('success', models.TextField(blank=True, default='')),
                ('fail', models.TextField(blank=True, default='')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
                ('bundled_policies', models.ManyToManyField(blank=True, related_name='member_of_bundle', to='policyengine.Policy')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.community')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GovernableAction',
            fields=[
                ('baseaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.baseaction')),
                ('community_revert', models.BooleanField(default=False)),
                ('community_origin', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('policyengine.baseaction', models.Model),
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposal_time', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('proposed', 'proposed'), ('failed', 'failed'), ('passed', 'passed')], max_length=10)),
                ('community_post', models.CharField(blank=True, max_length=300)),
                ('governance_process_url', models.URLField(blank=True, max_length=100)),
                ('governance_process_json', models.JSONField(blank=True, null=True)),
                ('action', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='policyengine.baseaction')),
                ('data', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='policyengine.datastore')),
                ('policy', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
        ),
        migrations.CreateModel(
            name='NumberVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_time', models.DateTimeField(auto_now_add=True)),
                ('number_value', models.IntegerField(null=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.proposal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityuser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LogAPICall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proposal_time', models.DateTimeField(auto_now_add=True)),
                ('call_type', models.CharField(max_length=300, verbose_name='call_type')),
                ('extra_info', models.TextField()),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityplatform')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityRole',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('role_name', models.TextField(max_length=300, verbose_name='readable_name')),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('is_base_role', models.BooleanField(default=False)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.community')),
            ],
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='CommunityDoc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, default='', null=True)),
                ('text', models.TextField(blank=True, default='', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.community')),
            ],
        ),
        migrations.CreateModel(
            name='BooleanVote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_time', models.DateTimeField(auto_now_add=True)),
                ('boolean_value', models.BooleanField(choices=[(True, 'Yes'), (False, 'No')], default=True, null=True)),
                ('proposal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.proposal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityuser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='baseaction',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityplatform', verbose_name='community'),
        ),
        migrations.AddField(
            model_name='baseaction',
            name='initiator',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityuser'),
        ),
        migrations.AddField(
            model_name='baseaction',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_policyengine.baseaction_set+', to='contenttypes.contenttype'),
        ),
        migrations.CreateModel(
            name='GovernableActionBundle',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('bundle_type', models.CharField(choices=[('election', 'election'), ('bundle', 'bundle')], max_length=10)),
                ('bundled_actions', models.ManyToManyField(related_name='member_of_bundle', to='policyengine.GovernableAction')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('policyengine.governableaction',),
        ),
    ]
