# Generated by Django 3.2.2 on 2021-09-02 15:10

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('policyengine', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConstitutionCommunity',
            fields=[
                ('communityplatform_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.communityplatform')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('policyengine.communityplatform',),
        ),
        migrations.CreateModel(
            name='PolicykitAddCommunityDoc',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.TextField()),
                ('text', models.TextField()),
            ],
            options={
                'permissions': (('can_execute_policykitaddcommunitydoc', 'Can execute policykit add community doc'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRemoveUserRole',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityrole')),
                ('users', models.ManyToManyField(to='policyengine.CommunityUser')),
            ],
            options={
                'permissions': (('can_execute_policykitremoveuserrole', 'Can execute policykit remove user role'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRemoveTriggerPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitremovetriggerpolicy', 'Can execute policykit remove trigger policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRemovePlatformPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitremoveplatformpolicy', 'Can execute policykit remove platform policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRemoveConstitutionPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitremoveconstitutionpolicy', 'Can execute policykit remove constitution policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRecoverTriggerPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitrecovertriggerpolicy', 'Can execute policykit recover trigger policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRecoverPlatformPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitrecoverplatformpolicy', 'Can execute policykit recover platform policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRecoverConstitutionPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitrecoverconstitutionpolicy', 'Can execute policykit recover constitution policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitRecoverCommunityDoc',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('doc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.communitydoc')),
            ],
            options={
                'permissions': (('can_execute_policykitrecovercommunitydoc', 'Can execute policykit recover community doc'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitEditRole',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=300, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('permissions', models.ManyToManyField(to='auth.Permission')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.communityrole')),
            ],
            options={
                'permissions': (('can_execute_policykiteditrole', 'Can execute policykit edit role'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitDeleteRole',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.communityrole')),
            ],
            options={
                'permissions': (('can_execute_policykitdeleterole', 'Can execute policykit delete role'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitDeleteCommunityDoc',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('doc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.communitydoc')),
            ],
            options={
                'permissions': (('can_execute_policykitdeletecommunitydoc', 'Can execute policykit delete community doc'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitChangeTriggerPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitchangetriggerpolicy', 'Can execute policykit change trigger policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitChangePlatformPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitchangeplatformpolicy', 'Can execute policykit change platform policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitChangeConstitutionPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
                ('policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.policy')),
            ],
            options={
                'permissions': (('can_execute_policykitchangeconstitutionpolicy', 'Can execute policykit change constitution policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitChangeCommunityDoc',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.TextField()),
                ('text', models.TextField()),
                ('doc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='policyengine.communitydoc')),
            ],
            options={
                'permissions': (('can_execute_policykitchangecommunitydoc', 'Can execute policykit change community doc'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitAddUserRole',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='policyengine.communityrole')),
                ('users', models.ManyToManyField(to='policyengine.CommunityUser')),
            ],
            options={
                'permissions': (('can_execute_policykitadduserrole', 'Can execute policykit add user role'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitAddTriggerPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
            ],
            options={
                'permissions': (('can_execute_policykitaddtriggerpolicy', 'Can execute policykit add trigger policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitAddRole',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=300, verbose_name='name')),
                ('description', models.TextField(blank=True, default='', null=True)),
                ('permissions', models.ManyToManyField(to='auth.Permission')),
            ],
            options={
                'permissions': (('can_execute_policykitaddrole', 'Can execute policykit add role'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitAddPlatformPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
            ],
            options={
                'permissions': (('can_execute_addpolicykitplatformpolicy', 'Can execute policykit add platform policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
        migrations.CreateModel(
            name='PolicykitAddConstitutionPolicy',
            fields=[
                ('governableaction_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='policyengine.governableaction')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('filter', models.TextField(blank=True, default='return True\n\n', verbose_name='Filter')),
                ('initialize', models.TextField(blank=True, default='pass\n\n', verbose_name='Initialize')),
                ('check', models.TextField(blank=True, default='return PASSED\n\n', verbose_name='Check')),
                ('notify', models.TextField(blank=True, default='pass\n\n', verbose_name='Notify')),
                ('success', models.TextField(blank=True, default='action.execute()\n\n', verbose_name='Pass')),
                ('fail', models.TextField(blank=True, default='pass\n\n', verbose_name='Fail')),
                ('action_types', models.ManyToManyField(to='policyengine.ActionType')),
            ],
            options={
                'permissions': (('can_execute_policykitaddconstitutionpolicy', 'Can execute policykit add constitution policy'),),
            },
            bases=('policyengine.governableaction',),
        ),
    ]
